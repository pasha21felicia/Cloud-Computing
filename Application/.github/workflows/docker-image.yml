name: Deploy to ECR

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-backend:
    name: Build Backend
    runs-on: ubuntu-latest
    steps:

    - name: Check out code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-central-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ecr-backend-image
        IMAGE_TAG: ${{ github.sha }}
      run: |
        echo "image_backend=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
        
        # Tag the image with both sha and latest 
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest ./backend
        
        # Push the image with all tags
        docker push -a $ECR_REGISTRY/$ECR_REPOSITORY

  build-frontend:
    name: Build Frontend
    runs-on: ubuntu-latest
    steps:

    - name: Check out code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-central-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ecr-frontend-image
        IMAGE_TAG: ${{ github.sha }}
      run: |
        echo "image_frontend=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

        # Tag the image with both sha and latest
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest ./frontend

        # Push the image with all tags
        docker push -a $ECR_REGISTRY/$ECR_REPOSITORY


  deploy-backend-to-eks:
    name: Deploy Backend to EKS
    needs: build-backend
    runs-on: ubuntu-latest
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-central-1

    - name: Create pasha-dev profile
      run: |
        aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }} --profile pasha-dev
        aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }} --profile pasha-dev
        aws configure set region eu-central-1 --profile pasha-dev
    - name: Setup kubectl
      uses: azure/setup-kubectl@v1
      with:
        version: 'latest'

    - name: Setup KUBECONFIG
      run: |
        echo "${{ secrets.KUBECONFIG }}" > kubeconfig.yaml
        echo "KUBECONFIG=kubeconfig.yaml" >> $GITHUB_ENV
      env:
        AWS_PROFILE: pasha-dev

    - name: Update Kubernetes deployment
      env:
        ECR_REGISTRY: 281438252740.dkr.ecr.eu-central-1.amazonaws.com
        ECR_REPOSITORY: ecr-backend-image
        IMAGE_TAG: ${{ github.sha }}
        AWS_PROFILE: pasha-dev
      run: |
        echo "SUCCESS"

        # Fetch the container name from the Kubernetes deployment
        CONTAINER_NAME=$(kubectl --kubeconfig=kubeconfig.yaml get deployment/appnews-backend-deployment -o jsonpath='{.spec.template.spec.containers[0].name}')
        echo "Container Name: $CONTAINER_NAME"

        # Print the final image name
        FINAL_IMAGE_NAME=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "Final Image Name: $FINAL_IMAGE_NAME"

        kubectl --kubeconfig=kubeconfig.yaml set image deployment/appnews-backend-deployment \
        $CONTAINER_NAME=$FINAL_IMAGE_NAME


  deploy-frontend-to-eks:
    name: Deploy Frontend to EKS
    needs: build-frontend
    runs-on: ubuntu-latest
    steps:
    - name: Create pasha-dev profile
      run: |
        aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }} --profile pasha-dev
        aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }} --profile pasha-dev
        aws configure set region eu-central-1 --profile pasha-dev

    - name: Setup kubectl
      uses: azure/setup-kubectl@v1
      with:
        version: 'latest'

    - name: Setup KUBECONFIG
      run: |
        echo "${{ secrets.KUBECONFIG }}" > kubeconfig.yaml
        echo "KUBECONFIG=kubeconfig.yaml" >> $GITHUB_ENV
      env:
        AWS_PROFILE: pasha-dev

    - name: Update Kubernetes deployment
      env:
        ECR_REGISTRY: 281438252740.dkr.ecr.eu-central-1.amazonaws.com
        ECR_REPOSITORY: ecr-frontend-image
        IMAGE_TAG: ${{ github.sha }}
        AWS_PROFILE: pasha-dev
      run: |
        echo "SUCCESS"

        # Fetch the container name from the Kubernetes deployment
        CONTAINER_NAME=$(kubectl --kubeconfig=kubeconfig.yaml get deployment/appnews-frontend-deployment -o jsonpath='{.spec.template.spec.containers[0].name}')
        echo "Container Name: $CONTAINER_NAME"

        # Print the final image name
        FINAL_IMAGE_NAME=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "Final Image Name: $FINAL_IMAGE_NAME"

        kubectl --kubeconfig=kubeconfig.yaml set image deployment/appnews-frontend-deployment \
        $CONTAINER_NAME=$FINAL_IMAGE_NAME
